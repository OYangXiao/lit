import 'core-js/modules/es.global-this.js';
const e = (e) => (t) =>
  'function' == typeof t
    ? ((e, t) => (customElements.define(e, t), t))(e, t)
    : ((e, t) => {
        const {kind: r, elements: n} = t;
        return {
          kind: r,
          elements: n,
          finisher(t) {
            customElements.define(e, t);
          },
        };
      })(e, t);
function t(e, t) {
  var r = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(e);
    t &&
      (n = n.filter(function (t) {
        return Object.getOwnPropertyDescriptor(e, t).enumerable;
      })),
      r.push.apply(r, n);
  }
  return r;
}
function r(e) {
  for (var r = 1; r < arguments.length; r++) {
    var o = null != arguments[r] ? arguments[r] : {};
    r % 2
      ? t(Object(o), !0).forEach(function (t) {
          n(e, t, o[t]);
        })
      : Object.getOwnPropertyDescriptors
      ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(o))
      : t(Object(o)).forEach(function (t) {
          Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(o, t));
        });
  }
  return e;
}
function n(e, t, r) {
  return (
    (t = (function (e) {
      var t = (function (e, t) {
        if ('object' != typeof e || null === e) return e;
        var r = e[Symbol.toPrimitive];
        if (void 0 !== r) {
          var n = r.call(e, t || 'default');
          if ('object' != typeof n) return n;
          throw new TypeError('@@toPrimitive must return a primitive value.');
        }
        return ('string' === t ? String : Number)(e);
      })(e, 'string');
      return 'symbol' == typeof t ? t : String(t);
    })(t)) in e
      ? Object.defineProperty(e, t, {
          value: r,
          enumerable: !0,
          configurable: !0,
          writable: !0,
        })
      : (e[t] = r),
    e
  );
}
const o = (e, t) =>
    'method' === t.kind && t.descriptor && !('value' in t.descriptor)
      ? r(
          r({}, t),
          {},
          {
            finisher(r) {
              r.createProperty(t.key, e);
            },
          }
        )
      : {
          kind: 'field',
          key: Symbol(),
          placement: 'own',
          descriptor: {},
          originalKey: t.key,
          initializer() {
            'function' == typeof t.initializer &&
              (this[t.key] = t.initializer.call(this));
          },
          finisher(r) {
            r.createProperty(t.key, e);
          },
        },
  i = (e, t, r) => {
    t.constructor.createProperty(r, e);
  };
function l(e) {
  return (t, r) => (void 0 !== r ? i(e, t, r) : o(e, t));
}
function c(e) {
  return l(r(r({}, e), {}, {state: !0}));
}
const u = (e) => {
  let {finisher: t, descriptor: n} = e;
  return (e, o) => {
    var i;
    if (void 0 === o) {
      const o = null !== (i = e.originalKey) && void 0 !== i ? i : e.key,
        l =
          null != n
            ? {
                kind: 'method',
                placement: 'prototype',
                key: o,
                descriptor: n(e.key),
              }
            : r(r({}, e), {}, {key: o});
      return (
        null != t &&
          (l.finisher = function (e) {
            t(e, o);
          }),
        l
      );
    }
    {
      const r = e.constructor;
      void 0 !== n && Object.defineProperty(e, o, n(o)), null == t || t(r, o);
    }
  };
};
function s(e) {
  return u({
    finisher: (t, r) => {
      Object.assign(t.prototype[r], e);
    },
  });
}
function a(e, t) {
  return u({
    descriptor: (r) => {
      const n = {
        get() {
          var t, r;
          return null !==
            (r =
              null === (t = this.renderRoot) || void 0 === t
                ? void 0
                : t.querySelector(e)) && void 0 !== r
            ? r
            : null;
        },
        enumerable: !0,
        configurable: !0,
      };
      if (t) {
        const t = 'symbol' == typeof r ? Symbol() : '__'.concat(r);
        n.get = function () {
          var r, n;
          return (
            void 0 === this[t] &&
              (this[t] =
                null !==
                  (n =
                    null === (r = this.renderRoot) || void 0 === r
                      ? void 0
                      : r.querySelector(e)) && void 0 !== n
                  ? n
                  : null),
            this[t]
          );
        };
      }
      return n;
    },
  });
}
function d(e) {
  return u({
    descriptor: (t) => ({
      get() {
        var t, r;
        return null !==
          (r =
            null === (t = this.renderRoot) || void 0 === t
              ? void 0
              : t.querySelectorAll(e)) && void 0 !== r
          ? r
          : [];
      },
      enumerable: !0,
      configurable: !0,
    }),
  });
}
function f(e) {
  return u({
    descriptor: (t) => ({
      async get() {
        var t;
        return (
          await this.updateComplete,
          null === (t = this.renderRoot) || void 0 === t
            ? void 0
            : t.querySelector(e)
        );
      },
      enumerable: !0,
      configurable: !0,
    }),
  });
}
var p;
const y =
  null !=
  (null === (p = window.HTMLSlotElement) || void 0 === p
    ? void 0
    : p.prototype.assignedElements)
    ? (e, t) => e.assignedElements(t)
    : (e, t) =>
        e.assignedNodes(t).filter((e) => e.nodeType === Node.ELEMENT_NODE);
function v(e) {
  const {slot: t, selector: r} = null != e ? e : {};
  return u({
    descriptor: (n) => ({
      get() {
        var n;
        const o = 'slot'.concat(t ? '[name='.concat(t, ']') : ':not([name])'),
          i =
            null === (n = this.renderRoot) || void 0 === n
              ? void 0
              : n.querySelector(o),
          l = null != i ? y(i, e) : [];
        return r ? l.filter((e) => e.matches(r)) : l;
      },
      enumerable: !0,
      configurable: !0,
    }),
  });
}
function b(e, t, r) {
  let n,
    o = e;
  return (
    'object' == typeof e ? ((o = e.slot), (n = e)) : (n = {flatten: t}),
    r
      ? v({slot: o, flatten: t, selector: r})
      : u({
          descriptor: (e) => ({
            get() {
              var e, t;
              const r = 'slot'.concat(
                  o ? '[name='.concat(o, ']') : ':not([name])'
                ),
                i =
                  null === (e = this.renderRoot) || void 0 === e
                    ? void 0
                    : e.querySelector(r);
              return null !== (t = null == i ? void 0 : i.assignedNodes(n)) &&
                void 0 !== t
                ? t
                : [];
            },
            enumerable: !0,
            configurable: !0,
          }),
        })
  );
}
export {
  e as customElement,
  s as eventOptions,
  l as property,
  a as query,
  d as queryAll,
  v as queryAssignedElements,
  b as queryAssignedNodes,
  f as queryAsync,
  c as state,
};
//# sourceMappingURL=lit-decorators.es.min.js.map
